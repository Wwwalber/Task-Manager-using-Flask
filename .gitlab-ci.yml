stages:
  - format
  - lint
  - compile
  - test
  - build

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"

# Cache para dependências Python
cache:
  paths:
    - .pip-cache/
    - venv/

# Regras para as ramificações
workflow:
  rules:
    - if: $CI_COMMIT_TAG
      when: always
    - if: $CI_COMMIT_BRANCH
      when: always

# Job de Formatação Automática
format_code:
  needs: []  # Executa primeiro
  stage: format
  image: python:3.9-slim-buster
  script:
    - pip install black isort
    - black .
    - isort .
  rules:
    - if: $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "development"

# Jobs de Linting e Análise de Código
lint_python:
  needs: ["format_code"]  # Executa após formatação
  stage: lint
  image: python:3.9-slim-buster
  script:
    - pip install flake8 black isort
    # Listar todos os arquivos Python para debug
    - find . -type f -name "*.py" | sort
    # Rodar Flake8 e salvar o relatório, mas não interromper o pipeline
    - flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --verbose --output-file=flake8-report.txt || echo "Lint errors found"
    # Black e Isort para verificar o formato do código
    - black . --check --diff > black-report.txt || echo "Black format errors found"
    - isort . --check-only --diff > isort-report.txt || echo "Isort format errors found"
  artifacts:
    when: always  # Sempre gera artefatos, mesmo quando falha
    reports:
      codequality: flake8-report.txt
    paths:
      - flake8-report.txt
      - black-report.txt
      - isort-report.txt
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "development"


# Jobs de Compilação
compile_job:
  needs: ["lint_python"]  # Executa após linting
  stage: compile
  image: python:3.9-slim-buster
  script:
    - python -m venv venv
    - source venv/bin/activate
    - pip install -r requirements.txt
    - python -m compileall .
  artifacts:
    paths:
      - venv/
    expire_in: 1 day
  rules:
    - if: $CI_COMMIT_REF_NAME  # Executa para qualquer branch

# Jobs de Teste
test_unit:
  stage: test
  image: python:3.9-slim-buster
  script:
    - source venv/bin/activate
    - pip install pytest pytest-cov
    - pytest tests/unit/ --cov=./ --cov-report=xml --cov-report=html
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.xml
      - htmlcov/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "development"

test_integration:
  stage: test
  image: python:3.9-slim-buster
  services:
    - postgres:13
  variables:
    POSTGRES_DB: taskmanager_test
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
  script:
    - source venv/bin/activate
    - pip install pytest pytest-cov
    - pytest tests/integration/ --cov=./ --cov-report=xml --cov-report=html
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.xml
      - htmlcov/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "development"

test_functional:
  stage: test
  image: python:3.9-slim-buster
  services:
    - postgres:13
  variables:
    POSTGRES_DB: taskmanager_test
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
  script:
    - source venv/bin/activate
    - pip install pytest pytest-cov
    - pytest tests/functional/ --cov=./ --cov-report=xml --cov-report=html
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.xml
      - htmlcov/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "development"

# Job de Build
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build --cache-from taskmanager:latest -t taskmanager:$CI_COMMIT_SHA .
    - docker tag taskmanager:$CI_COMMIT_SHA taskmanager:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "development"
